import streamlit as st
import pandas as pd
import os
from pathlib import Path
import shutil
import time
import plotly.express as px
from report_generator import create_pdf
import yaml
import logging
import traceback

logging.basicConfig(
    filename='logs/uilog.log', 
    level=logging.INFO,      
    format='%(asctime)s [%(levelname)s] %(message)s',
)

def set_detector_running_state(state: bool):
    with open('runtime.yaml') as f:
        data = yaml.safe_load(f)
        
    if isinstance(state, bool):
        data['detector']['running'] = state
                
        with open('runtime.yaml', 'w') as f:
            yaml.safe_dump(data, f)
            
        logging.info(f'Runtime state detector:running changed to {state}')
            
    else: 
        logging.warning(f'State expected to be bool, got: {type(state)}: {state}')
        
        
        
def set_detector_fps_state(fps: int):
    with open('runtime.yaml') as f:
        data = yaml.safe_load(f)
        
    if isinstance(fps, int):
        data['detector']['fps'] = fps
        
        with open('runtime.yaml', 'w') as f:
            yaml.safe_dump(data, f)
            
    else: 
        logging.info(f'Runtime state detector:fps changed to {fps}')
        
        logging.warning(f'State expected to be int, got: {type(fps)}: {fps}')

REPORT_PATH = 'reports/report.pdf'
DETECTIONS_DIR = Path("detections")

# ----- –°–∞–π–¥–±–∞—Ä -----
st.sidebar.title("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

if "running_state" not in st.session_state:
    st.session_state.running_state = False

# –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø (–ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç —Ç–≤–æ—è)
if st.sidebar.button("‚ñ∂ Start"):
    logging.info('Start button pressed')
    set_detector_running_state(True)
    
if st.sidebar.button("‚èπ Stop"):
    logging.info('Stop button pressed')
    # TURNED OFF FOR DEBUGGING
    # set_detector_running_state(False)
    create_pdf()
    

# –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ detections
if st.sidebar.button("üóë –û—á–∏—Å—Ç–∏—Ç—å detections"):
    if DETECTIONS_DIR.exists():
        shutil.rmtree(DETECTIONS_DIR)
        DETECTIONS_DIR.mkdir(exist_ok=True)
        st.sidebar.success("–ü–∞–ø–∫–∞ detections –æ—á–∏—â–µ–Ω–∞")
        
        logging.info('detections/ cleared')

# –í—ã–±–æ—Ä FPS –æ–±—Ä–∞–±–æ—Ç–∫–∏
fps_option = st.sidebar.slider("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π N-–π –∫–∞–¥—Ä", min_value=1, max_value=10, value=5)
logging.info(f'New fps value choosen: {fps_option}')

# –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
if os.path.exists(REPORT_PATH):
    with open(REPORT_PATH, "rb") as f:
        st.sidebar.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
            data=f,
            file_name=os.path.basename(REPORT_PATH),
            mime="application/pdf"
        )
        
# ----- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å -----
st.title("–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")

# ----- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ detections -----
# st.subheader("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ")
# if DETECTIONS_DIR.exists() and any(DETECTIONS_DIR.iterdir()):
#     latest_file = max(DETECTIONS_DIR.glob("*.jpg"), key=os.path.getctime)
#     st.image(str(latest_file), caption=f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–¥—Ä: {latest_file.name}")
# else:
#     st.info("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ detections")

# ----- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–∫—Ç–∞–º -----
st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã")
# –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∏–∑ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞)
objects_data = [
    {"–¢–∏–ø": "Man", "Confidence": 0.95, "ID": 1, "–í—Ä–µ–º—è": "12:34:56"},
    {"–¢–∏–ø": "Dog", "Confidence": 0.95, "ID": 1, "–í—Ä–µ–º—è": "12:34:56"}
]
objects_df = pd.DataFrame(objects_data)
st.dataframe(objects_df)

# ----- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º -----
st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º")

try:
    class_counts = objects_df['–¢–∏–ø'].value_counts().reset_index()
    class_counts.columns = ['–¢–∏–ø', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

    fig = px.bar(class_counts, x='–¢–∏–ø', y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', color='–¢–∏–ø',
                text='–¢–∏–ø', title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º")
    st.plotly_chart(fig, use_container_width=True)
    
except Exception as e:
    logging.error(f'Error with chart: {e}\n{traceback.format_exc()}')

